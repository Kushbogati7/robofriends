{"version":3,"sources":["components/work.js","components/worklist.js","components/Searchbox.js","components/Scroll.js","ErrorBoundary.js","container/App.js","reportWebVitals.js","index.js"],"names":["Robot","name","email","id","className","alt","src","List","robopeople","map","user","i","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","robot","console","log","fetch","then","response","json","nepal","filteredRobots","filter","robo","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,MAZf,YAAiC,IAAjBC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAEjB,OAF4B,EAALC,GAGnB,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAK,QAAQC,IAAG,+BAA0BL,EAA1B,mBACrB,gCACI,6BAAKA,IACL,4BAAIC,WCaLK,MAjBf,YAA6B,IAAdC,EAAa,EAAbA,WAEZ,OACI,8BACGA,EAAWC,KAAI,SAACC,EAAKC,GACtB,OACG,cAAC,EAAD,CAECR,GAAIK,EAAWG,GAAGR,GAClBF,KAAMO,EAAWG,GAAGV,KACpBC,MAAOM,EAAWG,GAAGT,OAHfM,EAAWG,GAAGR,UCKlBS,EAdG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,qBAAKT,UAAU,OAAf,SACG,uBACEA,UAAU,wCACVU,KAAK,SACLC,YAAY,iBACZC,SAAWH,OCDTI,G,MARA,SAACC,GACb,OACI,qBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACKJ,EAAMK,aCmBHC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHD,E,gEAQdC,KAAKC,SAAS,CAACF,UAAW,M,+BAK1B,OAAIC,KAAKF,MAAMC,SAEL,8EAEHC,KAAKT,MAAMK,a,GAlBEM,aCkDbC,E,kDA5CX,aAAe,IAAD,8BACd,gBAiBAC,eAAiB,SAACC,GAClB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKV,MAAQ,CACTW,MAAQ,GACRH,YAAc,IAElBI,QAAQC,IAAI,eANE,E,gEASI,IAAD,OACdC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAACQ,MAAQO,OACtCN,QAAQC,IAAI,uB,+BAWN,IAAD,EAC0BX,KAAKF,MAA5BW,EADH,EACGA,MAAQH,EADX,EACWA,YACTW,EAAiBR,EAAMS,QAAO,SAACC,GACjC,OAAQA,EAAK7C,KAAK8C,cAAcC,SAASf,EAAYc,kBAGzD,OADAV,QAAQC,IAAI,UAEZ,sBAAKlC,UAAU,KAAf,UACG,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAgBc,KAAKI,iBAChC,cAAC,EAAD,UACC,cAAC,EAAD,UACE,cAAC,EAAD,CAAMvB,WAAYoC,e,GArCdf,aCKHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCKdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a9186b92.chunk.js","sourcesContent":["\r\n// main layout/viewer page is build by this file\r\nfunction Robot({name,email,id}) {\r\n    \r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt= \"hello\" src={`https://robohash.org/${name}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Robot;","// it is just making our work a lot more easier and making the code look prettier\r\n\r\n\r\nimport Robot from '../components/work';\r\n\r\nfunction List({robopeople}) {\r\n     \r\n   return(\r\n       <div>\r\n         {robopeople.map((user,i) => {\r\n         return(\r\n            <Robot \r\n             key= {robopeople[i].id}\r\n             id={robopeople[i].id} \r\n             name={robopeople[i].name} \r\n             email={robopeople[i].email}/>\r\n         )}) \r\n         }\r\n       </div>\r\n   )\r\n\r\n}\r\nexport default List;","import React from 'react'\r\n\r\n\r\nconst Searchbox = ({searchChange}) =>{\r\n    return(\r\n        <div className=\"pa3 \">\r\n           <input \r\n             className=\" pa3 ba b--green bg-lightest-bluetype\" \r\n             type=\"search\" \r\n             placeholder=\"eg.eric rosman\" \r\n             onChange= {searchChange}\r\n\r\n            />\r\n            \r\n      </div>\r\n    )\r\n}\r\nexport default Searchbox;","\r\nconst Scroll = (props) => {\r\n   return(\r\n       <div style={{overflow: 'scroll', border: '1px solid black', height: '500px'}}>\r\n           {props.children}\r\n       </div>\r\n   ) \r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() { // it will catch the error only from child of ErrorBoundary i.e worklist.js\r\n        this.setState({hasError : true})\r\n            \r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) { //if the hasError come true then the <h1> will return, so to make hasError true\r\n                                   //only when there is mistake we use componentDidCatch and give hasError value to true.\r\n           return <h1>Opps that is not good...please wait a moment</h1>\r\n        }\r\n        return this.props.children //this indicates Errorboundary\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport List from \"../components/worklist\";\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../ErrorBoundary';\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n    super()\r\n    this.state = {\r\n        robot : [],\r\n        searchfield : \"\"\r\n    }\r\n    console.log(\"constructor\")\r\n}\r\n\r\n componentDidMount() {\r\n       fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response => response.json())\r\n       .then(nepal => this.setState({robot : nepal}))\r\n       console.log(\"componentDidMount\")\r\n   }\r\n\r\n   \r\n\r\n    onSearchChange = (event) => { // event is non-other than \"input\" of \"searchbox\".\r\n    this.setState({searchfield: event.target.value})//setState updates the state.In this case setState is updating,\r\n                                                 //the searchfield with whatever we type or what event value is.\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {robot , searchfield} = this.state; //destructuring.....\r\n        const filteredRobots = robot.filter((robo)=> {\r\n            return (robo.name.toLowerCase().includes(searchfield.toLowerCase()))//here includes()is comparing\r\n        })                                                              //if the searchfield has the string == robo.name\r\n        console.log(\"render\")                                           //if yes print that robot                     \r\n        return(\r\n        <div className=\"tc\">   \r\n           <h1 className=\"f1\">RoboFriends</h1>\r\n           <Searchbox searchChange = {this.onSearchChange}/>\r\n           <Scroll>\r\n            <ErrorBoundary>\r\n              <List robopeople={filteredRobots} />\r\n            </ErrorBoundary>  \r\n           </Scroll>\r\n        </div>\r\n            ) \r\n    } \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// it is doing all the stuffs underneath the hood/viewerpage..\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./container/App\";\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}